{
  "JSApiAbstractAction": {
    "prefix": ["Wise", "JSApiAbstractAction"],
    "body": [
      "sap.ui.define([",
      "  'sap/bi/webi/jsapi/flux/core/JSApiAbstractAction',",
      "  'sap/bi/webi/jsapi/WebiServices'",
      "], function ( // eslint-disable-line",
      "  JSApiAbstractAction,",
      "  WebiServices",
      ") {",
      "  'use strict'",
      "",
      "  const ${1:AbstractActionName} = JSApiAbstractAction.extend('sap.bi.webi.jsapi.flux.action.$1', {",
      "    metadata: {",
      "      properties: {",
      "        type: {",
      "          defaultValue: '${1/(^[A-Z])/${1:/downcase}/}'",
      "        }",
      "      }",
      "    }",
      "  })",
      "",
      "  $1.prototype.init = function () {",
      "    JSApiAbstractAction.prototype.init.call(this)",
      "    this.setJsapiFunction(WebiServices.document.${1/(^[A-Z])/${1:/downcase}/})",
      "    this.setJsapiContext(JSApiAbstractAction.CONTEXT.${2|Report,Document,ReportElement,ReportElementReference,Page,None|})",
      "    this.setUpdateDocumentAction(true)",
      "  }",
      "",
      "  $1.prototype.isJSAPICallNeed = function (oData, oArgs) {",
      "    // TODO",
      "    return true",
      "  }",
      "",
      "  $1.prototype.addActionArgs = function (oData, oArgs) {",
      "    // TODO",
      "    oArgs.${3:property} = oData.$3",
      "    $0",
      "  }",
      "",
      "  return $1",
      "})",
      ""
    ],
    "description": "Insert a new JSAPIAbstractAction. Use the TAB key to navigate between entry fields"
  },
  "UserAbstractAction": {
    "prefix": ["Wise", "UserAbstractAction"],
    "body": [
      "sap.ui.define([",
      "  'sap/bi/webi/core/UserAbstractAction',",
      "  'sap/bi/smart/core/action/ActionDispatcher',",
      "  'sap/bi/smart/core/action/ActionRegistry',",
      "  'sap/bi/webi/jsapi/flux/utils/ContextUtils'",
      "], function ( // eslint-disable-line",
      "  UserAbstractAction,",
      "  ActionDispatcher,",
      "  ActionRegistry,",
      "  ContextUtils",
      ") {",
      "  'use strict'",
      "",
      "  const User${1:AbstractActionName} = UserAbstractAction.extend('sap.bi.webi.action.user.User$1', {",
      "    metadata: {",
      "      properties: {",
      "        type: {",
      "          defaultValue: 'user$1'",
      "        },",
      "        setBusy: {",
      "          defaultValue: ${2|true,false|}",
      "        },",
      "        undoable: {",
      "          defaultValue: ${3|true,false|}",
      "        },",
      "        reloadPage: {",
      "          defaultValue: ${4|true,false|}",
      "        }",
      "      }",
      "    }",
      "  })",
      "",
      "  User$1.prototype.processAction = function (oArgs) { // eslint-disable-line max-statements",
      "    const { viewContext } = oArgs",
      "",
      "    // TODO",
      "    const args = {",
      "      $0",
      "    }",
      "",
      "    return ActionDispatcher.fireAction(",
      "      ActionRegistry.XXXXXXXXXXXXXXXXXXX,",
      "      ContextUtils.assign(",
      "        viewContext,",
      "        args",
      "      )",
      "    )",
      "  }",
      "",
      "  User$1.prototype.addActionArgs = function (oData, oArgs) {",
      "    // TODO",
      "    oArgs.${5:property} = oData.$5",
      "  }",
      "",
      "  return User$1",
      "})",
      ""
    ],
    "description": "Insert a new UserAbstractAction. Use the TAB key to navigate between entry fields"
  },
  "Workbenchelement": {
    "prefix": ["Wise", "WorkbenchElement"],
    "body": [
      "sap.ui.define([",
      "  'sap/bi/webi/core/flux/core/Dispatcher',",
      "  'sap/bi/smart/core/action/ActionRegistry',",
      "  'sap/bi/webi/core/AbstractWorkbenchElement',",
      "  'sap/bi/webi/core/flux/core/PropertiesAbstractStore',",
      "  'sap/bi/smart/core/store/StoreRegistry',",
      "  'sap/bi/webi/core/flux/core/HelperRegistry',",
      "  'sap/bi/webi/jsapi/flux/constants/SecuredCommands'",
      "], function ( // eslint-disable-line",
      "  Dispatcher,",
      "  ActionRegistry,",
      "  AbstractWorkbenchElement,",
      "  PropertiesAbstractStore,",
      "  StoreRegistry,",
      "  HelperRegistry,",
      "  SecuredCommands",
      ") {",
      "  'use strict'",
      "",
      "  const ${1:AbstractWorkbenchElementName} = new AbstractWorkbenchElement({",
      "    type: '${1/(^[A-Z])/${1:/downcase}/}',",
      "    tooltip: 'workbenchElement>${1/(^[A-Z])/${1:/downcase}/}/tooltip',",
      "    text: 'workbenchElement>${1/(^[A-Z])/${1:/downcase}/}/text',",
      "    icon: 'workbenchElement>${1/(^[A-Z])/${1:/downcase}/}/icon',",
      "    enabled: 'workbenchElement>${1/(^[A-Z])/${1:/downcase}/}/enabled',",
      "    visible: 'workbenchElement>${1/(^[A-Z])/${1:/downcase}/}/visible',",
      "    rights: SecuredCommands.${2:OPTIONAL_SECURITY_ID}",
      "  })",
      "",
      "  //",
      "  // LIFECYCLE",
      "  //",
      "",
      "  ${1}.init = function () {",
      "    StoreRegistry.getWorkbenchElementStore().addStoreProperty({",
      "      name: this.getType(),",
      "      type: PropertiesAbstractStore.propertyType.Object,",
      "      invalidable: false,",
      "      defaultValue: {",
      "        text: 'workbench.actions.contextualMenu.${1/(^[A-Z])/${1:/downcase}/}',",
      "        tooltip: 'workbench.actions.contextualMenu.${1/(^[A-Z])/${1:/downcase}/}.tooltip',",
      "        icon: 'sap-icon://${3:accept}',",
      "        enabled: true,",
      "        visible: true",
      "      }",
      "    })",
      "",
      "    Dispatcher.registerSuccess(",
      "      $1,",
      "      ActionRegistry.USER_UPDATE_SELECTION,",
      "      $1.handleLoadSelectionDataSuccess,",
      "      Dispatcher.Priority.LOW",
      "    )",
      "  }",
      "",
      "  $1.handleLoadSelectionDataSuccess = function (oEvent) {",
      "    const viewContext = oEvent.actionParam.viewContext || oEvent.actionParam",
      "    const infos = StoreRegistry.getWorkbenchElementStore().get$1(viewContext)",
      "    infos.enabled = ${0:false}",
      "    StoreRegistry.getWorkbenchElementStore().set$1(viewContext, infos)",
      "  }",
      "",
      "  $1.do = function (wiseViewId) { // eslint-disable-line",
      "    HelperRegistry.getKeepAliveHelper().keepAlive({ wiseViewId })",
      "    const viewContext = StoreRegistry.getWiseViewStore().getCurrentViewContext({ wiseViewId })",
      "  }",
      "",
      "  return $1",
      "})",
      ""
    ],
    "description": "Insert a new Workbenchelement. Use the TAB key to navigate between entry fields"
  },
  "getCurrentViewContext": {
    "prefix": ["Wise", "getCurrentViewContext"],
    "description": "Insert a this.getCurrentViewContext()",
    "body": [
      "const ${1:viewContext} = this.getCurrentViewContext()",
      "$0"
    ]
  },
  "setProperty": {
    "prefix": ["Wise", "Model", "setProperty"],
    "description": "Insert JSONModel model setProperty statement",
    "body": [
      "this._model.setProperty('/${1:modelPropertyName}', ${2:$1})",
      "$0"
    ]
  },
  "getProperty": {
    "prefix": ["Wise", "Model", "getProperty"],
    "description": "Insert JSONModel model getProperty statement",
    "body": [
      "const ${1:variableName} = this._model.getProperty('/${2:$1}')",
      "$0"
    ]
  },
  "array": {
    "prefix": ["Wise", "Array"],
    "description": "Array assistant",
    "body": [
      "const ${1:result} = ${2:arrayName}.${3|forEach,map,filter,includes,find,some,findIndex,every,indexOf|}((${4:arrayVariable}) => {",
      "   $0",
      "})"
    ]
  }
}
